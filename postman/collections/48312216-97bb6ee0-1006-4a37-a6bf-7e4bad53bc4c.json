{
	"info": {
		"_postman_id": "48312216-97bb6ee0-1006-4a37-a6bf-7e4bad53bc4c",
		"name": "IFN636_As02",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2f8c84d3-c0e2-455b-80b8-08e1429d7727",
						"exec": [
							"let response;\r",
							"try {\r",
							"    response = pm.response.json();\r",
							"} catch (e) {\r",
							"    console.log(\"JSON Parse Error:\", e.message);\r",
							"    response = {};\r",
							"}\r",
							"\r",
							"// Test for successful registration or user already exists\r",
							"pm.test(\"Registration response\", function () {\r",
							"    if (pm.response.code === 201) {\r",
							"        console.log(\"User registered successfully\");\r",
							"        \r",
							"        // Save JWT if returned\r",
							"        if (response && response.token) {\r",
							"            pm.environment.set(\"jwt_token\", response.token);\r",
							"            console.log(\"JWT Token saved\");\r",
							"        }\r",
							"        \r",
							"    } else if (pm.response.code === 400 && response.message === \"User already exists\") {\r",
							"        console.log(\"⚠️ User already exists - this is expected for repeat tests\");\r",
							"        \r",
							"    } else {\r",
							"        pm.expect.fail(`Unexpected response: ${pm.response.code} - ${response.message}`);\r",
							"    }\r",
							"});\r",
							"\r",
							"// status code (201 OR 400)\r",
							"pm.test(\"Status code is valid\", function () {\r",
							"    // Accept both 201 (new user) and 400 (duplicate user) as valid scenarios\r",
							"    pm.expect([201, 400]).to.include(pm.response.code);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"id": "48312216-2cf58ca0-273a-4881-a6bc-649828e2c1e4",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"ji@gmail.com\",\r\n  \"password\": \"ji\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:5001/api/auth/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8758da7b-7de4-4ae4-9ad4-b8adb9b0a1a1",
						"exec": [
							"pm.test(\"Login successful\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Token received\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('token');\r",
							"    \r",
							"    // Save token to environment variable\r",
							"    pm.environment.set(\"auth_token\", jsonData.token);\r",
							"    console.log(\"Token saved:\", jsonData.token);\r",
							"});\r",
							"\r",
							"// Parse the response body\r",
							"let response = pm.response.json();\r",
							"// Basic test: status code should be 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							" pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							" pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"// Save JWT token to environment variable (adjust key as needed)\r",
							"if (response.token) {\r",
							"    pm.environment.set(\"jwt_token\", response.token);\r",
							"    console.log(\"JWT Token saved to environment\");\r",
							"} else {\r",
							" console.warn(\"No token found in response!\");\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "48312216-81ec6083-263f-4ea9-8537-074c6c591e52",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"ji@gmail.com\",\r\n  \"password\": \"ji\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/api/auth/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Flat",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a11e1804-ec71-4bba-805d-416ffe0efd14",
						"exec": [
							"// Basic Response Tests\r",
							"pm.test(\"Status code is 201 (Created)\", function () {\r",
							"    if (pm.response.code === 400) {\r",
							"        console.log(\"400 Error - likely JSON format issue\");\r",
							"    } else if (pm.response.code === 401) {\r",
							"        console.log(\"401 Error - Invalid or expired token\");\r",
							"        console.log(\"Response:\", pm.response.json());\r",
							"    }\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Response Structure Tests\r",
							"pm.test(\"Response contains created flat data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData).to.have.property('title');\r",
							"});\r",
							"\r",
							"pm.test(\"Created flat has an ID\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('_id');\r",
							"    pm.expect(jsonData._id).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Response data matches sent data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData.title).to.equal(\"Modern 2BR Apartment\");\r",
							"    pm.expect(jsonData.description).to.equal(\"Beautiful apartment in city center\");\r",
							"    \r",
							"    pm.expect(jsonData.userId).to.not.be.empty;\r",
							"\r",
							"});\r",
							"\r",
							"// Save created flat ID\r",
							"pm.test(\"Save flat ID\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData._id) {\r",
							"        pm.environment.set(\"created_flat_id\", jsonData._id);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "48312216-40a38ab2-44ab-4cf8-acbe-4ec82565dfe8",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4OTc0OTEzOWUxMmQ0NjgyMWNhOTAxNSIsImlhdCI6MTc1OTA2MjQ5MiwiZXhwIjoxNzYxNjU0NDkyfQ.KkHqzAAJwUgXX8OuIvdhOV46YpLzZ53hQDRyo29O-Kk",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Test\",\r\n  \"description\": \"Test description\",\r\n  \"address\": \"Test address\",\r\n  \"bedrooms\": \"2\",\r\n  \"bathrooms\": \"1\",\r\n  \"carpark\": \"true\",\r\n  \"inspectionDate\": \"2025-10-15\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:5001/api/flats",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"flats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Flat",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a5596190-995e-443d-a33a-f0f80d3b17a4",
						"exec": [
							"// Basic Response Tests\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    if (pm.response.code === 401) {\r",
							"        console.log(\"401 Error - Invalid or expired token\");\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Data Structure Tests\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Each flat has required properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.length > 0) {\r",
							"        const flat = jsonData[0];\r",
							"        \r",
							"        // Log first flat structure for reference\r",
							"        console.log(\"First flat properties:\", Object.keys(flat));\r",
							"        \r",
							"        // Test common properties\r",
							"        pm.expect(flat).to.have.property('_id');\r",
							"        pm.expect(flat).to.have.property('userId');\r",
							"        pm.expect(flat).to.have.property('title');\r",
							"        pm.expect(flat).to.have.property('description');\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Each flat has required properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.length > 0) {\r",
							"        const flat = jsonData[0];\r",
							"        \r",
							"        console.log(\"Flat structure:\", Object.keys(flat));\r",
							"        \r",
							"        // Test properties\r",
							"        pm.expect(flat).to.have.property('title');\r",
							"        pm.expect(flat).to.have.property('tenantDetails');\r",
							"    }\r",
							"});\r",
							"pm.test(\"Response has correct CORS headers\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).to.equal(\"*\");\r",
							"});\r",
							"\r",
							"pm.test(\"All flats have valid IDs\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach((flat, index) => {\r",
							"        pm.expect(flat._id, `Flat ${index} should have _id`).to.be.a('string');\r",
							"        pm.expect(flat._id, `Flat ${index} _id should not be empty`).to.not.be.empty;\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"All flats belong to authenticated user\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach((flat, index) => {\r",
							"        pm.expect(flat.userId, `Flat ${index} should have userId`).to.not.be.empty;\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains reasonable data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // Log useful info\r",
							"    console.log(`Total flats returned: ${jsonData.length}`);\r",
							"    \r",
							"    if (jsonData.length > 0) {\r",
							"        console.log(\"Sample flat ID for maintenance testing:\", jsonData[0]._id);\r",
							"    }\r",
							"    \r",
							"    pm.expect(jsonData.length).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"// Save first flat ID for other tests\r",
							"pm.test(\"Save first flat ID for maintenance testing\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.length > 0) {\r",
							"        pm.environment.set(\"first_flat_id\", jsonData[0]._id);\r",
							"        console.log(\"Saved flat ID to environment:\", jsonData[0]._id);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "48312216-bb0d7ec2-bdf4-4eb4-9b0a-636a0cdc46ef",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "multipart/form-data",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					},
					{
						"key": "",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:5001/api/flats",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"flats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Flat",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "89ce287e-7768-44b0-8051-23f4212e520a",
						"exec": [
							"// Basic Response Tests\r",
							"pm.test(\"Status code is 200 (Updated)\", function () {\r",
							"    if (pm.response.code === 400) {\r",
							"        console.log(\"400 Error - Validation issue\");\r",
							"        console.log(\"Response:\", pm.response.json());\r",
							"    } else if (pm.response.code === 403) {\r",
							"        console.log(\"403 Error - Not authorized to update this flat\");\r",
							"    } else if (pm.response.code === 404) {\r",
							"        console.log(\"404 Error - Flat not found\");\r",
							"        console.log(\"Check if the flat ID in your URL is valid\");\r",
							"    } else if (pm.response.code === 401) {\r",
							"        console.log(\"401 Error - Invalid or expired token\");\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Response Structure Tests\r",
							"pm.test(\"Response contains updated flat data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData).to.have.property('_id');\r",
							"    pm.expect(jsonData).to.have.property('title');\r",
							"    pm.expect(jsonData).to.have.property('description');\r",
							"});\r",
							"\r",
							"pm.test(\"Updated flat has required properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // Test core properties\r",
							"    pm.expect(jsonData).to.have.property('_id');\r",
							"    pm.expect(jsonData).to.have.property('userId');\r",
							"    pm.expect(jsonData).to.have.property('title');\r",
							"    pm.expect(jsonData).to.have.property('description');\r",
							"    pm.expect(jsonData).to.have.property('updatedAt');\r",
							"    \r",
							"    pm.expect(jsonData._id).to.be.a('string');\r",
							"    pm.expect(jsonData._id).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Debug for checks\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    console.log(\"=== REQUEST DATA ===\");\r",
							"    console.log(\"Request URL:\", pm.request.url.toString());\r",
							"    console.log(\"Request body:\", pm.request.body);\r",
							"    \r",
							"    console.log(\"=== RESPONSE DATA ===\");\r",
							"    console.log(\"Response title:\", jsonData.title);\r",
							"    console.log(\"Response description:\", jsonData.description);\r",
							"    console.log(\"Response updatedAt:\", jsonData.updatedAt);\r",
							"    console.log(\"Response createdAt:\", jsonData.createdAt);\r",
							"    \r",
							"    console.log(\"=== TIMESTAMPS ===\");\r",
							"    const created = new Date(jsonData.createdAt);\r",
							"    const updated = new Date(jsonData.updatedAt);\r",
							"    console.log(\"Time difference (should be > 0 if updated):\", updated - created);\r",
							"});\r",
							"\r",
							"pm.test(\"Flat ownership is maintained\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // Verify the flat \r",
							"    pm.expect(jsonData.userId).to.not.be.empty;\r",
							"    pm.expect(jsonData.userId).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Update timestamp check\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const updatedAt = new Date(jsonData.updatedAt);\r",
							"    \r",
							"    console.log(\"UpdatedAt timestamp:\", jsonData.updatedAt);\r",
							"    console.log(\"Current time:\", new Date().toISOString());\r",
							"    \r",
							"    pm.expect(jsonData.updatedAt).to.not.be.empty;\r",
							"    pm.expect(updatedAt).to.be.a('date');\r",
							"});\r",
							"\r",
							"pm.test(\"Original creation data preserved\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property('createdAt');\r",
							"    pm.expect(jsonData.createdAt).to.not.be.empty;\r",
							"    \r",
							"    const createdAt = new Date(jsonData.createdAt);\r",
							"    const updatedAt = new Date(jsonData.updatedAt);\r",
							"    pm.expect(createdAt.getTime()).to.be.at.most(updatedAt.getTime());\r",
							"});\r",
							"\r",
							"// Save updated data\r",
							"pm.test(\"Save updated flat ID for future tests\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData._id) {\r",
							"        pm.environment.set(\"updated_flat_id\", jsonData._id);\r",
							"        console.log(\"Updated flat ID saved:\", jsonData._id);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "48312216-93af5523-6ad5-4159-8860-75c15f08e2ce",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "multipart/form-data",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text",
						"disabled": true
					},
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Updated Modern Apartment\",\r\n  \"description\": \"Recently renovated apartment with modern amenities\",\r\n  \"vacant\": false\r\n}"
				},
				"url": {
					"raw": "http://localhost:5001/api/flats/68da434525e10cb6be85d64d",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"flats",
						"68da434525e10cb6be85d64d"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Flat",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "02213c0f-11ce-4eb3-a3f5-c7fc56877ce5",
						"exec": [
							"// Basic Response Tests\r",
							"pm.test(\"Status code is 200 (Deleted)\", function () {\r",
							"    if (pm.response.code === 403) {\r",
							"        console.log(\"403 Error - Not authorized to delete this flat\");\r",
							"    } else if (pm.response.code === 404) {\r",
							"        console.log(\"404 Error - Flat not found\");\r",
							"    } else if (pm.response.code === 401) {\r",
							"        console.log(\"401 Error - Invalid or expired token\");\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Response Content Tests\r",
							"pm.test(\"Response contains success message\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Deletion message is appropriate\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const message = jsonData.message.toLowerCase();\r",
							"\r",
							"    const hasDeletedKeyword = message.includes('deleted') || \r",
							"                             message.includes('removed') || \r",
							"                             message.includes('successfully');\r",
							"    \r",
							"    pm.expect(hasDeletedKeyword, \"Message should indicate successful deletion\").to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response may include deleted flat info\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    if (jsonData.flat || jsonData.deletedFlat) {\r",
							"        const flatInfo = jsonData.flat || jsonData.deletedFlat;\r",
							"        pm.expect(flatInfo).to.have.property('_id');\r",
							"        console.log(\"Deleted flat ID:\", flatInfo._id);\r",
							"    } else {\r",
							"        console.log(\"API returned only success message (no flat details)\");\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"No sensitive data exposed\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // make sure no sensitive data is returned\r",
							"    pm.expect(jsonData).to.not.have.property('password');\r",
							"    pm.expect(jsonData).to.not.have.property('token');\r",
							"});\r",
							"\r",
							"// Cleanup environment variables\r",
							"pm.test(\"Clean up environment variables\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // If succesfully deleted flat, clean variables\r",
							"    if (pm.response.code === 200) {\r",
							"        pm.environment.unset(\"created_flat_id\");\r",
							"        pm.environment.unset(\"test_flat_id\");\r",
							"        pm.environment.unset(\"maintenance_report_id\");\r",
							"        \r",
							"        console.log(\"Cleaned up environment variables for deleted flat\");\r",
							"    }\r",
							"});\r",
							"\r",
							"// Verification test\r",
							"pm.test(\"Log deletion confirmation\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    if (pm.response.code === 200) {\r",
							"        console.log(\"✓ Flat successfully deleted\");\r",
							"        console.log(\"Response message:\", jsonData.message);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "48312216-f4321a3f-fa0d-4fd5-99f6-98d81e29b607",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "multipart/form-data",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text",
						"disabled": true
					},
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:5001/api/flats/68d9f9d8957d3e315e928b27",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"flats",
						"68d9f9d8957d3e315e928b27"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Tenant Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a3d42142-7e88-4d23-a445-3b0d8602bdf1",
						"exec": [
							"// Basic Response Tests\r",
							"pm.test(\"Status code is 201 (Created)\", function () {\r",
							"    if (pm.response.code === 400) {\r",
							"        console.log(\"400 Error - Validation issue\");\r",
							"        console.log(\"Response:\", pm.response.json());\r",
							"    } else if (pm.response.code === 403) {\r",
							"        console.log(\"403 Error - Not authorized to access this flat\");\r",
							"    } else if (pm.response.code === 404) {\r",
							"        console.log(\"404 Error - Flat not found\");\r",
							"        console.log(\"Check if the flat ID in your URL is valid\");\r",
							"    } else if (pm.response.code === 401) {\r",
							"        console.log(\"401 Error - Invalid or expired token\");\r",
							"    }\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Response Structure Tests\r",
							"pm.test(\"Response contains tenant creation confirmation\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    \r",
							"    if (jsonData.flat) {\r",
							"        pm.expect(jsonData.flat).to.have.property('tenantDetails');\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Created tenant has required properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // Based on your controller, response has: message, flat, tenant\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData).to.have.property('flat');\r",
							"    pm.expect(jsonData).to.have.property('tenant');\r",
							"    \r",
							"    // The tenant object should have the data we sent\r",
							"    const tenant = jsonData.tenant;\r",
							"    pm.expect(tenant).to.have.property('name');\r",
							"    pm.expect(tenant).to.have.property('email');\r",
							"    pm.expect(tenant).to.have.property('phone');\r",
							"    pm.expect(tenant).to.have.property('moveInDate');\r",
							"    pm.expect(tenant).to.have.property('rentAmount');\r",
							"    \r",
							"    // marked as occupied\r",
							"    const flat = jsonData.flat;\r",
							"    pm.expect(flat).to.have.property('tenantDetails');\r",
							"    pm.expect(flat.vacant).to.equal(false);\r",
							"});\r",
							"\r",
							"pm.test(\"Response data matches sent tenant data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const tenant = jsonData.tenant;\r",
							"    \r",
							"    // Test tenant data\r",
							"    pm.expect(tenant.name).to.equal(\"Sarah Johnson\");\r",
							"    pm.expect(tenant.email).to.equal(\"sarah.johnson@test.com\");\r",
							"    pm.expect(tenant.phone).to.equal(\"555-123-4567\");\r",
							"    pm.expect(tenant.moveInDate).to.equal(\"2025-01-01\");\r",
							"    pm.expect(tenant.rentAmount).to.equal(1800);\r",
							"});\r",
							"\r",
							"pm.test(\"Flat status updated to occupied\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    if (jsonData.flat) {\r",
							"        // add tenant - mark occupied\r",
							"        pm.expect(jsonData.flat.vacant).to.equal(false);\r",
							"        console.log(\"Flat vacancy status:\", jsonData.flat.vacant);\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"No sensitive data exposed\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData).to.not.have.property('password');\r",
							"    \r",
							"    // Check tenant data doesn't contain sensitive info\r",
							"    let tenantData = jsonData.tenant || \r",
							"                    (jsonData.flat && jsonData.flat.tenantDetails) || \r",
							"                    jsonData.tenantDetails;\r",
							"    \r",
							"    if (tenantData) {\r",
							"        pm.expect(tenantData).to.not.have.property('password');\r",
							"        pm.expect(tenantData).to.not.have.property('ssn');\r",
							"    }\r",
							"});\r",
							"\r",
							"// Save tenant data\r",
							"pm.test(\"Save tenant and flat data for future tests\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    if (jsonData.tenant) {\r",
							"        pm.environment.set(\"tenant_name\", jsonData.tenant.name);\r",
							"        pm.environment.set(\"tenant_email\", jsonData.tenant.email);\r",
							"        console.log(\"Saved tenant name:\", jsonData.tenant.name);\r",
							"    }\r",
							"    \r",
							"    // Save the flat ID with tenant details\r",
							"    if (jsonData.flat && jsonData.flat._id) {\r",
							"        pm.environment.set(\"occupied_flat_id\", jsonData.flat._id);\r",
							"        console.log(\"Saved occupied flat ID:\", jsonData.flat._id);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "48312216-921f16b9-e2dc-405a-a93a-fa0dcf7ea086",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "multipart/form-data",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text",
						"disabled": true
					},
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Sarah Johnson\",\r\n  \"email\": \"sarah.johnson@test.com\", \r\n  \"phone\": \"555-123-4567\",\r\n  \"moveInDate\": \"2025-01-01\",\r\n  \"rentAmount\": 1800,\r\n  \"dateOfBirth\": \"1988-03-20\",\r\n  \"leaseEndDate\": \"2025-12-31\",\r\n  \"bondAmount\": 3600\r\n}"
				},
				"url": {
					"raw": "http://localhost:5001/api/flats/68da434525e10cb6be85d64d/tenants",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"flats",
						"68da434525e10cb6be85d64d",
						"tenants"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Tenant Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3a2336e7-ce56-49af-a5ee-48c53952922a",
						"exec": [
							"// Basic Response Tests\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    if (pm.response.code === 401) {\r",
							"        console.log(\"401 Error - Invalid or expired token\");\r",
							"    } else if (pm.response.code === 404) {\r",
							"        console.log(\"404 Error - Tenant not found for this flat\");\r",
							"    } else if (pm.response.code === 403) {\r",
							"        console.log(\"403 Error - Not authorized to access this flat\");\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Data Structure Tests\r",
							"pm.test(\"Response contains tenant data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Response has required properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property('flatId');\r",
							"    pm.expect(jsonData).to.have.property('flatTitle');\r",
							"    pm.expect(jsonData).to.have.property('tenant');\r",
							"    pm.expect(jsonData).to.have.property('vacant');\r",
							"});\r",
							"\r",
							"pm.test(\"Tenant details have required properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const tenant = jsonData.tenant;\r",
							"    \r",
							"    pm.expect(tenant).to.have.property('name');\r",
							"    pm.expect(tenant).to.have.property('email');\r",
							"    pm.expect(tenant).to.have.property('phone');\r",
							"    pm.expect(tenant).to.have.property('moveInDate');\r",
							"    pm.expect(tenant).to.have.property('rentAmount');\r",
							"});\r",
							"\r",
							"pm.test(\"Tenant data is valid\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const tenant = jsonData.tenant;\r",
							"    \r",
							"    // Check data types\r",
							"    pm.expect(tenant.name).to.be.a('string');\r",
							"    pm.expect(tenant.email).to.be.a('string');\r",
							"    pm.expect(tenant.phone).to.be.a('string');\r",
							"    pm.expect(tenant.moveInDate).to.be.a('string');\r",
							"    pm.expect(tenant.rentAmount).to.be.a('number');\r",
							"    \r",
							"    // Check email format\r",
							"    pm.expect(tenant.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"});\r",
							"\r",
							"pm.test(\"Flat is marked as occupied\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // If there's a tenant, flat should not be vacant\r",
							"    pm.expect(jsonData.vacant).to.equal(false);\r",
							"});\r",
							"\r",
							"pm.test(\"Flat information is included\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData.flatId).to.be.a('string');\r",
							"    pm.expect(jsonData.flatTitle).to.be.a('string');\r",
							"    pm.expect(jsonData.flatId).to.not.be.empty;\r",
							"    pm.expect(jsonData.flatTitle).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"No sensitive data exposed\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // Ensure no sensitive information is returned\r",
							"    pm.expect(jsonData).to.not.have.property('password');\r",
							"    pm.expect(jsonData.tenant).to.not.have.property('password');\r",
							"    pm.expect(jsonData.tenant).to.not.have.property('ssn');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "48312216-ac5aaf12-25a8-4871-b8e1-71f09a30802f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Sarah Johnson\",\r\n  \"email\": \"sarah.johnson@test.com\", \r\n  \"phone\": \"555-123-4567\",\r\n  \"moveInDate\": \"2025-01-01\",\r\n  \"rentAmount\": 1800,\r\n  \"dateOfBirth\": \"1988-03-20\",\r\n  \"leaseEndDate\": \"2025-12-31\",\r\n  \"bondAmount\": 3600\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/api/flats/689aa0e72823e691896b9b63/tenants",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"flats",
						"689aa0e72823e691896b9b63",
						"tenants"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Tenant Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "697ec203-b7bb-499c-960c-e0265e8e3f69",
						"exec": [
							"// Basic Response Tests\r",
							"pm.test(\"Status code is 200 (Updated)\", function () {\r",
							"    if (pm.response.code === 400) {\r",
							"        console.log(\"400 Error - Validation issue\");\r",
							"        console.log(\"Response:\", pm.response.json());\r",
							"    } else if (pm.response.code === 403) {\r",
							"        console.log(\"403 Error - Not authorized to update this tenant\");\r",
							"    } else if (pm.response.code === 404) {\r",
							"        console.log(\"404 Error - No tenant found for this flat\");\r",
							"    } else if (pm.response.code === 401) {\r",
							"        console.log(\"401 Error - Invalid or expired token\");\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Response Structure Tests\r",
							"pm.test(\"Response contains updated tenant data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData).to.have.property('flat');\r",
							"    pm.expect(jsonData).to.have.property('tenant');\r",
							"});\r",
							"\r",
							"pm.test(\"Updated tenant has required properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const tenant = jsonData.tenant;\r",
							"    \r",
							"    // Test core tenant properties\r",
							"    pm.expect(tenant).to.have.property('name');\r",
							"    pm.expect(tenant).to.have.property('email');\r",
							"    pm.expect(tenant).to.have.property('phone');\r",
							"    pm.expect(tenant).to.have.property('moveInDate');\r",
							"    pm.expect(tenant).to.have.property('rentAmount');\r",
							"});\r",
							"\r",
							"pm.test(\"Response data matches updated data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const tenant = jsonData.tenant;\r",
							"    \r",
							"    // Test the updated values you sent\r",
							"    pm.expect(tenant.name).to.equal(\"Update Test\");\r",
							"    pm.expect(tenant.email).to.equal(\"sarah.update@test.com\");\r",
							"    pm.expect(tenant.phone).to.equal(\"555-999-8888\");\r",
							"    pm.expect(tenant.rentAmount).to.equal(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Flat data is preserved\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const flat = jsonData.flat;\r",
							"    \r",
							"    // Verify the flat still belongs to the same user\r",
							"    pm.expect(flat).to.have.property('_id');\r",
							"    pm.expect(flat).to.have.property('userId');\r",
							"    pm.expect(flat).to.have.property('title');\r",
							"    \r",
							"    // Flat should still be occupied\r",
							"    pm.expect(flat.vacant).to.equal(false);\r",
							"    pm.expect(flat.tenantDetails).to.not.be.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Update message is appropriate\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData.message).to.include('updated');\r",
							"    pm.expect(jsonData.message.toLowerCase()).to.include('tenant');\r",
							"});\r",
							"\r",
							"pm.test(\"Tenant data validation\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const tenant = jsonData.tenant;\r",
							"    \r",
							"    // Check data types\r",
							"    pm.expect(tenant.name).to.be.a('string');\r",
							"    pm.expect(tenant.email).to.be.a('string');\r",
							"    pm.expect(tenant.phone).to.be.a('string');\r",
							"    pm.expect(tenant.rentAmount).to.be.a('number');\r",
							"    \r",
							"    // Validate email format\r",
							"    pm.expect(tenant.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"});\r",
							"\r",
							"pm.test(\"No sensitive data exposed\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // Ensure no sensitive information is returned\r",
							"    pm.expect(jsonData).to.not.have.property('password');\r",
							"    pm.expect(jsonData.tenant).to.not.have.property('password');\r",
							"    pm.expect(jsonData.tenant).to.not.have.property('ssn');\r",
							"});\r",
							"\r",
							"// Save updated data for future tests\r",
							"pm.test(\"Save updated tenant data for future tests\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.tenant) {\r",
							"        pm.environment.set(\"updated_tenant_name\", jsonData.tenant.name);\r",
							"        pm.environment.set(\"updated_tenant_email\", jsonData.tenant.email);\r",
							"        console.log(\"Updated tenant name saved:\", jsonData.tenant.name);\r",
							"    }\r",
							"    if (jsonData.flat) {\r",
							"        pm.environment.set(\"updated_flat_id\", jsonData.flat._id);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "48312216-cca05600-a6ce-471d-92c8-7c5c44b987e7",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "multipart/form-data",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					},
					{
						"key": "",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Update Test\",\r\n  \"email\": \"sarah.update@test.com\", \r\n  \"phone\": \"555-999-8888\",\r\n  \"moveInDate\": \"2025-01-01\",\r\n  \"rentAmount\": 2000,\r\n  \"dateOfBirth\": \"1988-03-20\",\r\n  \"leaseEndDate\": \"2025-12-31\",\r\n  \"bondAmount\": 3600\r\n}"
				},
				"url": {
					"raw": "http://localhost:5001/api/flats/68da434525e10cb6be85d64d/tenants",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"flats",
						"68da434525e10cb6be85d64d",
						"tenants"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Tenant Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1c4f22b9-749c-4f7f-b1cf-98d1a098df31",
						"exec": [
							"// Basic Response Tests\r",
							"pm.test(\"Status code is 200 (Tenant Removed)\", function () {\r",
							"    if (pm.response.code === 403) {\r",
							"        console.log(\"403 Error - Not authorized to remove tenant from this flat\");\r",
							"    } else if (pm.response.code === 404) {\r",
							"        console.log(\"404 Error - No tenant found for this flat\");\r",
							"    } else if (pm.response.code === 401) {\r",
							"        console.log(\"401 Error - Invalid or expired token\");\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Response Structure Tests\r",
							"pm.test(\"Response contains tenant removal confirmation\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData).to.have.property('flat');\r",
							"    pm.expect(jsonData).to.have.property('removedTenant');\r",
							"});\r",
							"\r",
							"pm.test(\"Flat is marked as vacant\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const flat = jsonData.flat;\r",
							"    \r",
							"    // flat changed to vacant after tenant removal \r",
							"    pm.expect(flat.vacant).to.equal(true);\r",
							"    \r",
							"    // Tenant details should be removed/null\r",
							"    pm.expect(flat.tenantDetails).to.be.null;\r",
							"    \r",
							"    console.log(\"Flat vacancy status after tenant removal:\", flat.vacant);\r",
							"});\r",
							"\r",
							"pm.test(\"Flat details are preserved\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const flat = jsonData.flat;\r",
							"    \r",
							"    pm.expect(flat).to.have.property('_id');\r",
							"    pm.expect(flat).to.have.property('userId');\r",
							"    pm.expect(flat).to.have.property('title');\r",
							"    pm.expect(flat).to.have.property('description');\r",
							"    \r",
							"    pm.expect(flat._id).to.not.be.empty;\r",
							"    pm.expect(flat.title).to.not.be.empty;\r",
							"    pm.expect(flat.userId).to.not.be.empty;\r",
							"    \r",
							"    console.log(\"Flat details preserved - ID:\", flat._id, \"Title:\", flat.title);\r",
							"});\r",
							"\r",
							"pm.test(\"Removed tenant details are returned\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const removedTenant = jsonData.removedTenant;\r",
							"    \r",
							"    // Should return the tenant data that was removed\r",
							"    pm.expect(removedTenant).to.have.property('name');\r",
							"    pm.expect(removedTenant).to.have.property('email');\r",
							"    pm.expect(removedTenant).to.have.property('phone');\r",
							"    pm.expect(removedTenant).to.have.property('moveInDate');\r",
							"    pm.expect(removedTenant).to.have.property('rentAmount');\r",
							"    \r",
							"    console.log(\"Removed tenant:\", removedTenant.name, removedTenant.email);\r",
							"});\r",
							"\r",
							"pm.test(\"Removal message is appropriate\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData.message).to.include('removed');\r",
							"    pm.expect(jsonData.message.toLowerCase()).to.include('tenant');\r",
							"    \r",
							"    console.log(\"Removal message:\", jsonData.message);\r",
							"});\r",
							"\r",
							"pm.test(\"Tenant data validation\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const removedTenant = jsonData.removedTenant;\r",
							"    \r",
							"    // Validate the removed tenant data types\r",
							"    pm.expect(removedTenant.name).to.be.a('string');\r",
							"    pm.expect(removedTenant.email).to.be.a('string'); \r",
							"    pm.expect(removedTenant.phone).to.be.a('string');\r",
							"    pm.expect(removedTenant.rentAmount).to.be.a('number');\r",
							"    \r",
							"    // Validate email format\r",
							"    pm.expect(removedTenant.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"});\r",
							"\r",
							"pm.test(\"No sensitive data exposed\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData).to.not.have.property('password');\r",
							"    pm.expect(jsonData.removedTenant).to.not.have.property('password');\r",
							"    pm.expect(jsonData.removedTenant).to.not.have.property('ssn');\r",
							"});\r",
							"\r",
							"// Update environment variables\r",
							"pm.test(\"Update environment for vacant flat\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    if (jsonData.flat && jsonData.flat._id) {\r",
							"        \r",
							"        pm.environment.set(\"vacant_flat_id\", jsonData.flat._id);\r",
							"        pm.environment.unset(\"occupied_flat_id\"); // Remove occupied status\r",
							"        \r",
							"        console.log(\"Updated environment - Flat is now vacant:\", jsonData.flat._id);\r",
							"    }\r",
							"    \r",
							"    pm.environment.unset(\"tenant_name\");\r",
							"    pm.environment.unset(\"tenant_email\");\r",
							"    \r",
							"    console.log(\"Cleared tenant data from environment variables\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "48312216-78f36b19-8a65-49a2-a60d-f7a5f0aa4d4e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Update Test\",\r\n  \"email\": \"sarah.update@test.com\", \r\n  \"phone\": \"555-999-8888\",\r\n  \"moveInDate\": \"2025-01-01\",\r\n  \"rentAmount\": 2000,\r\n  \"dateOfBirth\": \"1988-03-20\",\r\n  \"leaseEndDate\": \"2025-12-31\",\r\n  \"bondAmount\": 3600\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/api/flats/68da434525e10cb6be85d64d/tenants",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"flats",
						"68da434525e10cb6be85d64d",
						"tenants"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Maintenance Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1151fce0-b37a-4630-a8d7-1653796cbbe4",
						"exec": [
							"// Basic Response Tests\r",
							"pm.test(\"Status code is 201 (Created)\", function () {\r",
							"    if (pm.response.code === 400) {\r",
							"        console.log(\"400 Error - Validation issue\");\r",
							"        console.log(\"Response:\", pm.response.json());\r",
							"    } else if (pm.response.code === 403) {\r",
							"        console.log(\"403 Error - Not authorized to access this flat\");\r",
							"    } else if (pm.response.code === 404) {\r",
							"        console.log(\"404 Error - Flat not found\");\r",
							"    }\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Response Structure Tests\r",
							"pm.test(\"Response contains maintenance report data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData).to.have.property('maintenanceReport');\r",
							"    pm.expect(jsonData).to.have.property('contractor');\r",
							"    pm.expect(jsonData).to.have.property('flat');\r",
							"});\r",
							"\r",
							"pm.test(\"Maintenance report has required properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const report = jsonData.maintenanceReport;\r",
							"    \r",
							"    pm.expect(report).to.have.property('issueType');\r",
							"    pm.expect(report).to.have.property('description');\r",
							"    pm.expect(report).to.have.property('priority');\r",
							"    pm.expect(report).to.have.property('contractorId');\r",
							"    pm.expect(report).to.have.property('status');\r",
							"    pm.expect(report).to.have.property('reportedDate');\r",
							"    pm.expect(report).to.have.property('estimatedCost');\r",
							"    pm.expect(report).to.have.property('scheduledDate');\r",
							"    pm.expect(report).to.have.property('images');\r",
							"});\r",
							"\r",
							"pm.test(\"Response data matches sent data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const report = jsonData.maintenanceReport;\r",
							"    \r",
							"    // Test the data that was sent\r",
							"    pm.expect(report.issueType).to.equal(\"plumbing\");\r",
							"    pm.expect(report.description).to.equal(\"Kitchen sink is leaking and needs immediate attention\");\r",
							"    pm.expect(report.priority).to.equal(\"high\");\r",
							"    pm.expect(report.contractorId).to.equal(\"1\");\r",
							"    pm.expect(report.status).to.equal(\"reported\");\r",
							"});\r",
							"\r",
							"pm.test(\"Contractor information is included\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const contractor = jsonData.contractor;\r",
							"    \r",
							"    pm.expect(contractor).to.have.property('id');\r",
							"    pm.expect(contractor).to.have.property('name');\r",
							"    pm.expect(contractor).to.have.property('specialization');\r",
							"    pm.expect(contractor).to.have.property('phone');\r",
							"    pm.expect(contractor).to.have.property('email');\r",
							"});\r",
							"\r",
							"pm.test(\"Maintenance report created successfully\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const flat = jsonData.flat;\r",
							"    \r",
							"    pm.expect(flat).to.have.property('maintenanceReports');\r",
							"    pm.expect(flat.maintenanceReports).to.be.an('array');\r",
							"    \r",
							"    console.log(\"Note: Maintenance report was created\");\r",
							"});\r",
							"\r",
							"//save report data\r",
							"pm.test(\"Save maintenance report data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    if (jsonData.flat && jsonData.flat._id) {\r",
							"        pm.environment.set(\"test_flat_id\", jsonData.flat._id);\r",
							"    }\r",
							"    \r",
							"    if (jsonData.maintenanceReport) {\r",
							"        pm.environment.set(\"last_maintenance_issue_type\", jsonData.maintenanceReport.issueType);\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Debug - Show server error details\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    console.log(\"=== SERVER ERROR DEBUG ===\");\r",
							"    console.log(\"Full error response:\", JSON.stringify(jsonData, null, 2));\r",
							"    console.log(\"Error message:\", jsonData.message);\r",
							"    console.log(\"Request URL:\", pm.request.url.toString());\r",
							"    console.log(\"Request body:\", pm.request.body);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "48312216-1aee3e23-599b-41da-b9ce-38334cd0a2d3",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "multipart/form-data",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text",
						"disabled": true
					},
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"issueType\": \"plumbing\",\r\n  \"description\": \"Kitchen sink is leaking and needs immediate attention\",\r\n  \"priority\": \"high\",\r\n  \"contractorId\": \"1\",\r\n  \"estimatedCost\": \"250\",\r\n  \"scheduledDate\": \"2025-10-01\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:5001/api/flats/689aa0e72823e691896b9b63/maintenance",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"flats",
						"689aa0e72823e691896b9b63",
						"maintenance"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Maintenance Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e900d35c-0e7d-43ca-b3dd-71200d859a51",
						"exec": [
							"// Basic Response Tests\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    if (pm.response.code === 401) {\r",
							"        console.log(\"401 Error - Invalid or expired token\");\r",
							"    } else if (pm.response.code === 403) {\r",
							"        console.log(\"403 Error - Not authorized\");\r",
							"    } else if (pm.response.code === 404) {\r",
							"        console.log(\"404 Error - Flat not found\");\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// Response Structure Tests\r",
							"pm.test(\"Response contains maintenance reports data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData).to.have.property('flatId');\r",
							"    pm.expect(jsonData).to.have.property('flatTitle');\r",
							"    pm.expect(jsonData).to.have.property('reports');\r",
							"});\r",
							"\r",
							"pm.test(\"Reports is an array\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.reports).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Each report has required properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.reports.length > 0) {\r",
							"        const report = jsonData.reports[0];\r",
							"        \r",
							"        pm.expect(report).to.have.property('issueType');\r",
							"        pm.expect(report).to.have.property('description');\r",
							"        pm.expect(report).to.have.property('priority');\r",
							"        pm.expect(report).to.have.property('contractorId');\r",
							"        pm.expect(report).to.have.property('status');\r",
							"        pm.expect(report).to.have.property('reportedDate');\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Reports include contractor details\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.reports.length > 0) {\r",
							"        const report = jsonData.reports[0];\r",
							"        \r",
							"        pm.expect(report).to.have.property('contractorDetails');\r",
							"        pm.expect(report.contractorDetails).to.have.property('name');\r",
							"        pm.expect(report.contractorDetails).to.have.property('phone');\r",
							"        pm.expect(report.contractorDetails).to.have.property('specialization');\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Reports are sorted by reported date\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const reports = jsonData.reports;\r",
							"    \r",
							"    if (reports.length > 1) {\r",
							"        for (let i = 0; i < reports.length - 1; i++) {\r",
							"            const currentDate = new Date(reports[i].reportedDate);\r",
							"            const nextDate = new Date(reports[i + 1].reportedDate);\r",
							"            pm.expect(currentDate.getTime()).to.be.at.least(nextDate.getTime());\r",
							"        }\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Report data is valid\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.reports.length > 0) {\r",
							"        const report = jsonData.reports[0];\r",
							"        \r",
							"        pm.expect(report.issueType).to.be.a('string');\r",
							"        pm.expect(report.description).to.be.a('string');\r",
							"        pm.expect(report.priority).to.be.a('string');\r",
							"        pm.expect(report.status).to.be.a('string');\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Log maintenance reports summary\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    console.log(`Total maintenance reports: ${jsonData.reports.length}`);\r",
							"    console.log(`Flat: ${jsonData.flatTitle}`);\r",
							"    \r",
							"    if (jsonData.reports.length > 0) {\r",
							"        const statusCounts = {};\r",
							"        jsonData.reports.forEach(report => {\r",
							"            statusCounts[report.status] = (statusCounts[report.status] || 0) + 1;\r",
							"        });\r",
							"        console.log(\"Status breakdown:\", statusCounts);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "48312216-ba8b9e8f-5673-4fbb-8929-cfed27f17dd7",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "multipart/form-data",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text",
						"disabled": true
					},
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"message\": \"Maintenance reports retrieved successfully\",\r\n  \"flatId\": \"689aa0e72823e691896b9b63\",\r\n  \"flatTitle\": \"17 Adelaide st, Brisbane City\",\r\n  \"reports\": [\r\n    {\r\n      \"id\": \"1759121598352\",\r\n      \"issueType\": \"plumbing\",\r\n      \"description\": \"Kitchen sink leaking\",\r\n      \"priority\": \"high\",\r\n      \"contractorId\": \"1\",\r\n      \"status\": \"reported\",\r\n      \"reportedDate\": \"2025-09-29T04:53:18.352Z\",\r\n      \"contractorDetails\": {\r\n        \"id\": \"1\",\r\n        \"name\": \"ABC Plumbing Services\",\r\n        \"specialization\": \"plumbing\",\r\n        \"phone\": \"+1234567890\",\r\n        \"email\": \"contact@abcplumbing.com\"\r\n      }\r\n    }\r\n  ]\r\n}"
				},
				"url": {
					"raw": "http://localhost:5001/api/flats/689aa0e72823e691896b9b63/maintenance",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"flats",
						"689aa0e72823e691896b9b63",
						"maintenance"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Maintenance Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0a9c16a8-a519-4eb8-b9bd-e400c95adf89",
						"exec": [
							"// Basic Response Tests\r",
							"pm.test(\"Status code is 200 (Updated)\", function () {\r",
							"    if (pm.response.code === 400) {\r",
							"        console.log(\"400 Error - Validation issue\");\r",
							"        console.log(\"Response:\", pm.response.json());\r",
							"    } else if (pm.response.code === 403) {\r",
							"        console.log(\"403 Error - Not authorized\");\r",
							"    } else if (pm.response.code === 404) {\r",
							"        console.log(\"404 Error - Flat or maintenance report not found\");\r",
							"    } else if (pm.response.code === 401) {\r",
							"        console.log(\"401 Error - Invalid or expired token\");\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Response Structure Tests\r",
							"pm.test(\"Response contains updated maintenance report\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData).to.have.property('report');\r",
							"    pm.expect(jsonData).to.have.property('flat');\r",
							"});\r",
							"\r",
							"pm.test(\"Updated report has required properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const report = jsonData.report;\r",
							"    \r",
							"    pm.expect(report).to.have.property('issueType');\r",
							"    pm.expect(report).to.have.property('description');\r",
							"    pm.expect(report).to.have.property('priority');\r",
							"    pm.expect(report).to.have.property('status');\r",
							"    pm.expect(report).to.have.property('reportedDate');\r",
							"});\r",
							"\r",
							"pm.test(\"Response data matches updated data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const report = jsonData.report;\r",
							"    \r",
							"    // Test the updated values you sent\r",
							"    pm.expect(report.status).to.equal(\"in-progress\");\r",
							"    \r",
							"    if (report.actualCost !== undefined) {\r",
							"        pm.expect(report.actualCost).to.equal(300);\r",
							"    }\r",
							"    \r",
							"    if (report.notes !== undefined) {\r",
							"        pm.expect(report.notes).to.equal(\"Work has started on the repair\");\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Report has lastUpdated timestamp\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const report = jsonData.report;\r",
							"    \r",
							"    pm.expect(report).to.have.property('lastUpdated');\r",
							"    pm.expect(report.lastUpdated).to.not.be.empty;\r",
							"    \r",
							"    console.log(\"Last updated:\", report.lastUpdated);\r",
							"});\r",
							"\r",
							"pm.test(\"Update message is appropriate\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData.message).to.include('updated');\r",
							"    pm.expect(jsonData.message.toLowerCase()).to.include('maintenance');\r",
							"});\r",
							"\r",
							"pm.test(\"Flat data is preserved\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const flat = jsonData.flat;\r",
							"    \r",
							"    pm.expect(flat).to.have.property('_id');\r",
							"    pm.expect(flat).to.have.property('title');\r",
							"    pm.expect(flat).to.have.property('maintenanceReports');\r",
							"    pm.expect(flat.maintenanceReports).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Original report data is preserved\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const report = jsonData.report;\r",
							"    \r",
							"    // These fields should not change during update\r",
							"    pm.expect(report.issueType).to.be.a('string');\r",
							"    pm.expect(report.description).to.be.a('string');\r",
							"    pm.expect(report.reportedDate).to.not.be.empty;\r",
							"});\r",
							"\r",
							"// Save updated data\r",
							"pm.test(\"Log update confirmation\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    if (pm.response.code === 200) {\r",
							"        console.log(\"Maintenance report updated successfully\");\r",
							"        console.log(\"Status:\", jsonData.report.status);\r",
							"        if (jsonData.report.actualCost) {\r",
							"            console.log(\"Actual cost:\", jsonData.report.actualCost);\r",
							"        }\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "48312216-c070c4e3-68d3-4843-a52c-a0cd1f1e0225",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"status\": \"in-progress\",\r\n  \"actualCost\": 300,\r\n  \"completionDate\": \"2025-10-05\",\r\n  \"notes\": \"Work has started on the repair\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/api/flats/689aa0e72823e691896b9b63/maintenance/68da6e35f458354d33a4e963",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"flats",
						"689aa0e72823e691896b9b63",
						"maintenance",
						"68da6e35f458354d33a4e963"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Maintenance Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a80f77eb-7416-4a01-972c-20c881d0457a",
						"exec": [
							"// Basic Response Tests\r",
							"pm.test(\"Status code is 200 (Deleted)\", function () {\r",
							"    if (pm.response.code === 403) {\r",
							"        console.log(\"403 Error - Not authorized to delete this maintenance report\");\r",
							"    } else if (pm.response.code === 404) {\r",
							"        console.log(\"404 Error - Flat or maintenance report not found\");\r",
							"    } else if (pm.response.code === 401) {\r",
							"        console.log(\"401 Error - Invalid or expired token\");\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Response Content Tests\r",
							"pm.test(\"Response contains success message\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData).to.have.property('flat');\r",
							"});\r",
							"\r",
							"pm.test(\"Deletion message is appropriate\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const message = jsonData.message.toLowerCase();\r",
							"    \r",
							"    pm.expect(message).to.include('deleted');\r",
							"    pm.expect(message).to.include('maintenance');\r",
							"});\r",
							"\r",
							"pm.test(\"Flat data is preserved\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const flat = jsonData.flat;\r",
							"    \r",
							"    // Flat information should remain intact\r",
							"    pm.expect(flat).to.have.property('_id');\r",
							"    pm.expect(flat).to.have.property('userId');\r",
							"    pm.expect(flat).to.have.property('title');\r",
							"    pm.expect(flat).to.have.property('maintenanceReports');\r",
							"    \r",
							"    // Core flat data should not be empty\r",
							"    pm.expect(flat._id).to.not.be.empty;\r",
							"    pm.expect(flat.title).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Maintenance reports array exists\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const flat = jsonData.flat;\r",
							"    \r",
							"    pm.expect(flat.maintenanceReports).to.be.an('array');\r",
							"    console.log(\"Remaining maintenance reports:\", flat.maintenanceReports.length);\r",
							"});\r",
							"\r",
							"pm.test(\"No sensitive data exposed\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // Ensure no sensitive information is returned\r",
							"    pm.expect(jsonData).to.not.have.property('password');\r",
							"    pm.expect(jsonData).to.not.have.property('token');\r",
							"});\r",
							"\r",
							"// Cleanup environment variables\r",
							"pm.test(\"Clean up environment variables\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    if (pm.response.code === 200) {\r",
							"        // Remove maintenance report related variables\r",
							"        pm.environment.unset(\"maintenance_report_id\");\r",
							"        pm.environment.unset(\"last_maintenance_issue_type\");\r",
							"        \r",
							"        console.log(\"Cleaned up maintenance report environment variables\");\r",
							"    }\r",
							"});\r",
							"\r",
							"// Confirmation logging\r",
							"pm.test(\"Log deletion confirmation\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    if (pm.response.code === 200) {\r",
							"        console.log(\"Maintenance report successfully deleted\");\r",
							"        console.log(\"Message:\", jsonData.message);\r",
							"        console.log(\"Flat:\", jsonData.flat.title);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "48312216-903e64df-13c6-4740-b150-dac7f9f43f4f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:5001/api/flats/689aa0e72823e691896b9b63/maintenance/68daa2a1916fd1ec79fede41",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"flats",
						"689aa0e72823e691896b9b63",
						"maintenance",
						"68daa2a1916fd1ec79fede41"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Rental Invoice",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00f99294-3716-4c9f-8333-3c5bf4d87b8d",
						"exec": [
							"// Basic Response Tests\r",
							"pm.test(\"Status code is 201 (Created)\", function () {\r",
							"    if (pm.response.code === 400) {\r",
							"        console.log(\"400 Error - Validation issue\");\r",
							"        console.log(\"Response:\", pm.response.json());\r",
							"    } else if (pm.response.code === 403) {\r",
							"        console.log(\"403 Error - Not authorized\");\r",
							"    } else if (pm.response.code === 404) {\r",
							"        console.log(\"404 Error - Flat not found\");\r",
							"    } else if (pm.response.code === 500) {\r",
							"        console.log(\"500 Error - Server error\");\r",
							"        console.log(\"Error:\", pm.response.json().message);\r",
							"    }\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// Response Structure Tests\r",
							"pm.test(\"Response contains invoice data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData).to.have.property('invoice');\r",
							"    pm.expect(jsonData).to.have.property('flat');\r",
							"});\r",
							"\r",
							"pm.test(\"Invoice has required properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const invoice = jsonData.invoice;\r",
							"    \r",
							"    pm.expect(invoice).to.have.property('id');\r",
							"    pm.expect(invoice).to.have.property('type');\r",
							"    pm.expect(invoice).to.have.property('amount');\r",
							"    pm.expect(invoice).to.have.property('dueDate');\r",
							"    pm.expect(invoice).to.have.property('issueDate');\r",
							"    pm.expect(invoice).to.have.property('status');\r",
							"    pm.expect(invoice).to.have.property('flatId');\r",
							"    pm.expect(invoice).to.have.property('flatTitle');\r",
							"});\r",
							"\r",
							"pm.test(\"Invoice data matches sent data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const invoice = jsonData.invoice;\r",
							"    \r",
							"    // Test sent data\r",
							"    pm.expect(invoice.type).to.equal(\"rental\");\r",
							"    pm.expect(invoice.amount).to.equal(1800);\r",
							"    pm.expect(invoice.status).to.equal(\"pending\");\r",
							"});\r",
							"\r",
							"pm.test(\"Rental invoice includes tenant details\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const invoice = jsonData.invoice;\r",
							"    \r",
							"    if (invoice.type === 'rental') {\r",
							"        pm.expect(invoice).to.have.property('tenantName');\r",
							"        pm.expect(invoice).to.have.property('tenantEmail');\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Invoice added to flat\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const flat = jsonData.flat;\r",
							"    \r",
							"    pm.expect(flat).to.have.property('invoices');\r",
							"    pm.expect(flat.invoices).to.be.an('array');\r",
							"    pm.expect(flat.invoices.length).to.be.at.least(1);\r",
							"});\r",
							"\r",
							"// Save invoice data for future tests\r",
							"pm.test(\"Save invoice ID for future tests\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.invoice && jsonData.invoice.id) {\r",
							"        pm.environment.set(\"invoice_id\", jsonData.invoice.id);\r",
							"        console.log(\"Saved invoice ID:\", jsonData.invoice.id);\r",
							"    }\r",
							"    if (jsonData.flat && jsonData.flat._id) {\r",
							"        pm.environment.set(\"invoice_flat_id\", jsonData.flat._id);\r",
							"    }\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "48312216-861f1b22-14b0-4d40-9942-a25fa95ea4d0",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"type\": \"rental\",\r\n  \"amount\": 1800,\r\n  \"dueDate\": \"2025-11-25\",\r\n  \"description\": \"Monthly rent for November 2025\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/api/flats/689aa0e72823e691896b9b63/invoices",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"flats",
						"689aa0e72823e691896b9b63",
						"invoices"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Maintenance Invoice",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00f99294-3716-4c9f-8333-3c5bf4d87b8d",
						"exec": [
							"// Basic Response Tests\r",
							"pm.test(\"Status code is 201 (Created)\", function () {\r",
							"    if (pm.response.code === 400) {\r",
							"        console.log(\"400 Error - Validation issue\");\r",
							"        console.log(\"Response:\", pm.response.json());\r",
							"    } else if (pm.response.code === 403) {\r",
							"        console.log(\"403 Error - Not authorized\");\r",
							"    } else if (pm.response.code === 404) {\r",
							"        console.log(\"404 Error - Flat not found\");\r",
							"    }\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Response Structure Tests\r",
							"pm.test(\"Response contains maintenance invoice data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData).to.have.property('invoice');\r",
							"    pm.expect(jsonData).to.have.property('flat');\r",
							"});\r",
							"\r",
							"pm.test(\"Maintenance invoice has required properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const invoice = jsonData.invoice;\r",
							"    \r",
							"    pm.expect(invoice).to.have.property('id');\r",
							"    pm.expect(invoice).to.have.property('type');\r",
							"    pm.expect(invoice).to.have.property('amount');\r",
							"    pm.expect(invoice).to.have.property('dueDate');\r",
							"    pm.expect(invoice).to.have.property('issueDate');\r",
							"    pm.expect(invoice).to.have.property('status');\r",
							"    pm.expect(invoice).to.have.property('flatId');\r",
							"    pm.expect(invoice).to.have.property('flatTitle');\r",
							"    pm.expect(invoice).to.have.property('description');\r",
							"});\r",
							"\r",
							"pm.test(\"Invoice type is maintenance\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const invoice = jsonData.invoice;\r",
							"    \r",
							"    pm.expect(invoice.type).to.equal(\"maintenance\");\r",
							"});\r",
							"\r",
							"pm.test(\"Invoice data matches sent data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const invoice = jsonData.invoice;\r",
							"    \r",
							"    // Test the data that was sent\r",
							"    pm.expect(invoice.amount).to.equal(500);\r",
							"    pm.expect(invoice.status).to.equal(\"pending\");\r",
							"    pm.expect(invoice.description).to.equal(\"Plumbing repair charges\");\r",
							"});\r",
							"\r",
							"pm.test(\"Maintenance invoice does not have tenant details\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const invoice = jsonData.invoice;\r",
							"    \r",
							"    // Maintenance invoices shouldn't have tenant-specific fields\r",
							"    pm.expect(invoice).to.not.have.property('tenantName');\r",
							"    pm.expect(invoice).to.not.have.property('tenantEmail');\r",
							"});\r",
							"\r",
							"pm.test(\"Invoice added to flat\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const flat = jsonData.flat;\r",
							"    \r",
							"    pm.expect(flat).to.have.property('invoices');\r",
							"    pm.expect(flat.invoices).to.be.an('array');\r",
							"    pm.expect(flat.invoices.length).to.be.at.least(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Invoice amounts are valid\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const invoice = jsonData.invoice;\r",
							"    \r",
							"    pm.expect(invoice.amount).to.be.a('number');\r",
							"    pm.expect(invoice.amount).to.be.above(0);\r",
							"});\r",
							"\r",
							"// Save invoice data for future tests\r",
							"pm.test(\"Save maintenance invoice ID for future tests\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.invoice && jsonData.invoice.id) {\r",
							"        pm.environment.set(\"maintenance_invoice_id\", jsonData.invoice.id);\r",
							"        console.log(\"Saved maintenance invoice ID:\", jsonData.invoice.id);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "48312216-292bed48-0c74-409b-ab02-ec162051a024",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"type\": \"maintenance\",\r\n  \"amount\": 500,\r\n  \"dueDate\": \"2025-11-15\",\r\n  \"description\": \"Plumbing repair charges\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/api/flats/689aa0e72823e691896b9b63/invoices",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"flats",
						"689aa0e72823e691896b9b63",
						"invoices"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Rental/Maintenance Invoice",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d8958ce4-355b-46e7-80ba-f2bdab8fa98e",
						"exec": [
							"// Basic Response Tests\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    if (pm.response.code === 401) {\r",
							"        console.log(\"401 Error - Invalid or expired token\");\r",
							"    } else if (pm.response.code === 403) {\r",
							"        console.log(\"403 Error - Not authorized\");\r",
							"    } else if (pm.response.code === 404) {\r",
							"        console.log(\"404 Error - Flat not found\");\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Response Structure Tests\r",
							"pm.test(\"Response contains invoices data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData).to.have.property('flatTitle');\r",
							"    pm.expect(jsonData).to.have.property('invoices');\r",
							"});\r",
							"\r",
							"pm.test(\"Invoices is an array\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.invoices).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Each invoice has required properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.invoices.length > 0) {\r",
							"        const invoice = jsonData.invoices[0];\r",
							"        \r",
							"        pm.expect(invoice).to.have.property('id');\r",
							"        pm.expect(invoice).to.have.property('type');\r",
							"        pm.expect(invoice).to.have.property('amount');\r",
							"        pm.expect(invoice).to.have.property('dueDate');\r",
							"        pm.expect(invoice).to.have.property('status');\r",
							"        pm.expect(invoice).to.have.property('description');\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Invoice types are valid\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.invoices.forEach((invoice, index) => {\r",
							"        pm.expect(invoice.type, `Invoice ${index} type`).to.be.oneOf(['rental', 'maintenance']);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Rental invoices have tenant details\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const rentalInvoices = jsonData.invoices.filter(inv => inv.type === 'rental');\r",
							"    \r",
							"    rentalInvoices.forEach((invoice, index) => {\r",
							"        pm.expect(invoice, `Rental invoice ${index}`).to.have.property('tenantName');\r",
							"        pm.expect(invoice, `Rental invoice ${index}`).to.have.property('tenantEmail');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Maintenance invoices don't have tenant details\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const maintenanceInvoices = jsonData.invoices.filter(inv => inv.type === 'maintenance');\r",
							"    \r",
							"    maintenanceInvoices.forEach((invoice, index) => {\r",
							"        pm.expect(invoice, `Maintenance invoice ${index}`).to.not.have.property('tenantName');\r",
							"        pm.expect(invoice, `Maintenance invoice ${index}`).to.not.have.property('tenantEmail');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Invoices are sorted by issue date\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const invoices = jsonData.invoices;\r",
							"    \r",
							"    if (invoices.length > 1) {\r",
							"        for (let i = 0; i < invoices.length - 1; i++) {\r",
							"            const currentDate = new Date(invoices[i].issueDate);\r",
							"            const nextDate = new Date(invoices[i + 1].issueDate);\r",
							"            pm.expect(currentDate.getTime()).to.be.at.least(nextDate.getTime());\r",
							"        }\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Invoice amounts are valid\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.invoices.forEach((invoice, index) => {\r",
							"        pm.expect(invoice.amount, `Invoice ${index} amount`).to.be.a('number');\r",
							"        pm.expect(invoice.amount, `Invoice ${index} amount`).to.be.above(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Log invoices summary\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    console.log(`Total invoices: ${jsonData.invoices.length}`);\r",
							"    \r",
							"    const rentalCount = jsonData.invoices.filter(inv => inv.type === 'rental').length;\r",
							"    const maintenanceCount = jsonData.invoices.filter(inv => inv.type === 'maintenance').length;\r",
							"    const pendingCount = jsonData.invoices.filter(inv => inv.status === 'pending').length;\r",
							"    const paidCount = jsonData.invoices.filter(inv => inv.status === 'paid').length;\r",
							"    \r",
							"    console.log(`Rental: ${rentalCount}, Maintenance: ${maintenanceCount}`);\r",
							"    console.log(`Pending: ${pendingCount}, Paid: ${paidCount}`);\r",
							"    \r",
							"    const totalAmount = jsonData.invoices.reduce((sum, inv) => sum + inv.amount, 0);\r",
							"    console.log(`Total amount: $${totalAmount}`);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "48312216-fc9ca130-7800-4679-9ba3-2cc9cd30fd8e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"message\": \"Invoices retrieved successfully\",\r\n  \"flatId\": \"689aa0e72823e691896b9b63\",\r\n  \"flatTitle\": \"17 Adelaide st, Brisbane City\",\r\n  \"invoices\": [\r\n    {\r\n      \"id\": \"1759152133576\",\r\n      \"type\": \"rental\",\r\n      \"tenantName\": \"Sarah Johnson\",\r\n      \"tenantEmail\": \"sarah.johnson@example.com\",\r\n      \"flatTitle\": \"17 Adelaide st, Brisbane City\",\r\n      \"amount\": 1800,\r\n      \"dueDate\": \"2025-11-01T00:00:00.000Z\",\r\n      \"status\": \"pending\",\r\n      \"description\": \"Monthly rent for November 2025\"\r\n    },\r\n    {\r\n      \"id\": \"1759152244789\",\r\n      \"type\": \"maintenance\",\r\n      \"flatTitle\": \"17 Adelaide st, Brisbane City\",\r\n      \"amount\": 500,\r\n      \"dueDate\": \"2025-11-15T00:00:00.000Z\",\r\n      \"status\": \"pending\",\r\n      \"description\": \"Plumbing repair charges\"\r\n    }\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/api/flats/689aa0e72823e691896b9b63/invoices",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"flats",
						"689aa0e72823e691896b9b63",
						"invoices"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Rental/Maintenance Invoice",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7127cc76-015e-4fdc-bf50-c182ffe4d429",
						"exec": [
							"// Basic Response Tests\r",
							"pm.test(\"Status code is 201 (Created)\", function () {\r",
							"    if (pm.response.code === 400) {\r",
							"        console.log(\"400 Error - Validation issue\");\r",
							"        console.log(\"Response:\", pm.response.json());\r",
							"    } else if (pm.response.code === 403) {\r",
							"        console.log(\"403 Error - Not authorized\");\r",
							"    } else if (pm.response.code === 404) {\r",
							"        console.log(\"404 Error - Flat not found\");\r",
							"    } else if (pm.response.code === 401) {\r",
							"        console.log(\"401 Error - Invalid or expired token\");\r",
							"    }\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Response Structure Tests\r",
							"pm.test(\"Response contains payment data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData).to.have.property('payment');\r",
							"    pm.expect(jsonData).to.have.property('flat');\r",
							"});\r",
							"\r",
							"pm.test(\"Payment has required properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const payment = jsonData.payment;\r",
							"    \r",
							"    pm.expect(payment).to.have.property('id');\r",
							"    pm.expect(payment).to.have.property('amount');\r",
							"    pm.expect(payment).to.have.property('paymentDate');\r",
							"    pm.expect(payment).to.have.property('paymentMethod');\r",
							"    pm.expect(payment).to.have.property('recordedDate');\r",
							"});\r",
							"\r",
							"pm.test(\"Payment data matches sent data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const payment = jsonData.payment;\r",
							"    \r",
							"    pm.expect(payment.amount).to.equal(1800);\r",
							"    pm.expect(payment.paymentMethod).to.equal(\"bank transfer\");\r",
							"    pm.expect(payment.description).to.equal(\"November rent payment\");\r",
							"});\r",
							"\r",
							"pm.test(\"Payment added to flat\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const flat = jsonData.flat;\r",
							"    \r",
							"    pm.expect(flat).to.have.property('paymentLogs');\r",
							"    pm.expect(flat.paymentLogs).to.be.an('array');\r",
							"    pm.expect(flat.paymentLogs.length).to.be.at.least(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Linked invoice status updated to paid\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const flat = jsonData.flat;\r",
							"    const payment = jsonData.payment;\r",
							"    \r",
							"    // If payment was linked to an invoice\r",
							"    if (payment.invoiceId && flat.invoices) {\r",
							"        const linkedInvoice = flat.invoices.find(inv => inv.id === payment.invoiceId);\r",
							"        \r",
							"        if (linkedInvoice) {\r",
							"            pm.expect(linkedInvoice.status).to.equal(\"paid\");\r",
							"            pm.expect(linkedInvoice).to.have.property('paidDate');\r",
							"            \r",
							"            console.log(\"✓ Invoice status updated from 'pending' to 'paid'\");\r",
							"            console.log(\"Invoice ID:\", linkedInvoice.id);\r",
							"            console.log(\"Paid date:\", linkedInvoice.paidDate);\r",
							"        } else {\r",
							"            console.log(\"Note: Linked invoice not found in response\");\r",
							"        }\r",
							"    } else {\r",
							"        console.log(\"Note: Payment not linked to any invoice\");\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Payment amount is valid\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const payment = jsonData.payment;\r",
							"    \r",
							"    pm.expect(payment.amount).to.be.a('number');\r",
							"    pm.expect(payment.amount).to.be.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Payment date is valid\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const payment = jsonData.payment;\r",
							"    \r",
							"    pm.expect(payment.paymentDate).to.not.be.empty;\r",
							"    pm.expect(payment.recordedDate).to.not.be.empty;\r",
							"});\r",
							"\r",
							"// Save payment data for future tests\r",
							"pm.test(\"Save payment ID for future tests\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.payment && jsonData.payment.id) {\r",
							"        pm.environment.set(\"payment_id\", jsonData.payment.id);\r",
							"        console.log(\"Saved payment ID:\", jsonData.payment.id);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "48312216-669d170d-02c7-4b1c-87b1-a2c9cb08c203",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"amount\": 1800,\r\n  \"paymentDate\": \"2025-11-01\",\r\n  \"paymentMethod\": \"bank transfer\",\r\n  \"description\": \"November rent payment\",\r\n  \"invoiceId\": \"1759159520954\"\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/api/flats/689aa0e72823e691896b9b63/payments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"flats",
						"689aa0e72823e691896b9b63",
						"payments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Payment History",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1501d334-db37-43a3-bef6-09ce7c8214d8",
						"exec": [
							"// Basic Response Tests\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    if (pm.response.code === 401) {\r",
							"        console.log(\"401 Error - Invalid or expired token\");\r",
							"    } else if (pm.response.code === 403) {\r",
							"        console.log(\"403 Error - Not authorized\");\r",
							"    } else if (pm.response.code === 404) {\r",
							"        console.log(\"404 Error - Flat not found\");\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Response Structure Tests\r",
							"pm.test(\"Response contains payment history data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData).to.have.property('flatId');\r",
							"    pm.expect(jsonData).to.have.property('flatTitle');\r",
							"    pm.expect(jsonData).to.have.property('payments');\r",
							"});\r",
							"\r",
							"pm.test(\"Payments is an array\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.payments).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Each payment has required properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.payments.length > 0) {\r",
							"        const payment = jsonData.payments[0];\r",
							"        \r",
							"        pm.expect(payment).to.have.property('id');\r",
							"        pm.expect(payment).to.have.property('amount');\r",
							"        pm.expect(payment).to.have.property('paymentDate');\r",
							"        pm.expect(payment).to.have.property('paymentMethod');\r",
							"        pm.expect(payment).to.have.property('recordedDate');\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Payments are sorted by recorded date\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const payments = jsonData.payments;\r",
							"    \r",
							"    if (payments.length > 1) {\r",
							"        for (let i = 0; i < payments.length - 1; i++) {\r",
							"            const currentDate = new Date(payments[i].recordedDate);\r",
							"            const nextDate = new Date(payments[i + 1].recordedDate);\r",
							"            pm.expect(currentDate.getTime()).to.be.at.least(nextDate.getTime());\r",
							"        }\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Payment amounts are valid\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.payments.forEach((payment, index) => {\r",
							"        pm.expect(payment.amount, `Payment ${index} amount`).to.be.a('number');\r",
							"        pm.expect(payment.amount, `Payment ${index} amount`).to.be.above(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Payment methods are specified\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.payments.forEach((payment, index) => {\r",
							"        pm.expect(payment.paymentMethod, `Payment ${index} method`).to.be.a('string');\r",
							"        pm.expect(payment.paymentMethod, `Payment ${index} method`).to.not.be.empty;\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Payment dates are valid\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.payments.forEach((payment, index) => {\r",
							"        pm.expect(payment.paymentDate, `Payment ${index} date`).to.not.be.empty;\r",
							"        pm.expect(payment.recordedDate, `Payment ${index} recorded date`).to.not.be.empty;\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Log payment history summary\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    console.log(`Total payments: ${jsonData.payments.length}`);\r",
							"    console.log(`Flat: ${jsonData.flatTitle}`);\r",
							"    \r",
							"    if (jsonData.payments.length > 0) {\r",
							"        const totalAmount = jsonData.payments.reduce((sum, payment) => sum + payment.amount, 0);\r",
							"        console.log(`Total amount paid: $${totalAmount}`);\r",
							"        \r",
							"        const paymentMethods = {};\r",
							"        jsonData.payments.forEach(payment => {\r",
							"            paymentMethods[payment.paymentMethod] = (paymentMethods[payment.paymentMethod] || 0) + 1;\r",
							"        });\r",
							"        console.log(\"Payment methods used:\", paymentMethods);\r",
							"        \r",
							"        const linkedToInvoice = jsonData.payments.filter(p => p.invoiceId).length;\r",
							"        console.log(`Payments linked to invoices: ${linkedToInvoice}`);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "48312216-b808ff6e-5e1a-4724-b119-af35d36b520b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:5001/api/flats/689aa0e72823e691896b9b63/payments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"flats",
						"689aa0e72823e691896b9b63",
						"payments"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"id": "48312216-0296b9ac-1574-4fdf-9ef4-072f5cb9deba",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		}
	]
}
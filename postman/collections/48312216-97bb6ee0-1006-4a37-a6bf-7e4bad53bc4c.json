{
	"info": {
		"_postman_id": "48312216-97bb6ee0-1006-4a37-a6bf-7e4bad53bc4c",
		"name": "IFN636_As02",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2f8c84d3-c0e2-455b-80b8-08e1429d7727",
						"exec": [
							"let response;\r",
							"try {\r",
							"    response = pm.response.json();\r",
							"} catch (e) {\r",
							"    console.log(\"JSON Parse Error:\", e.message);\r",
							"    response = {};\r",
							"}\r",
							"\r",
							"// Test for successful registration or user already exists\r",
							"pm.test(\"Registration response\", function () {\r",
							"    if (pm.response.code === 201) {\r",
							"        console.log(\"User registered successfully\");\r",
							"        \r",
							"        // Save JWT if returned\r",
							"        if (response && response.token) {\r",
							"            pm.environment.set(\"jwt_token\", response.token);\r",
							"            console.log(\"JWT Token saved\");\r",
							"        }\r",
							"        \r",
							"    } else if (pm.response.code === 400 && response.message === \"User already exists\") {\r",
							"        console.log(\"⚠️ User already exists - this is expected for repeat tests\");\r",
							"        \r",
							"    } else {\r",
							"        pm.expect.fail(`Unexpected response: ${pm.response.code} - ${response.message}`);\r",
							"    }\r",
							"});\r",
							"\r",
							"// status code (201 OR 400)\r",
							"pm.test(\"Status code is valid\", function () {\r",
							"    // Accept both 201 (new user) and 400 (duplicate user) as valid scenarios\r",
							"    pm.expect([201, 400]).to.include(pm.response.code);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"id": "48312216-2cf58ca0-273a-4881-a6bc-649828e2c1e4",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"ji@gmail.com\",\r\n  \"password\": \"ji\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:5001/api/auth/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8758da7b-7de4-4ae4-9ad4-b8adb9b0a1a1",
						"exec": [
							"pm.test(\"Login successful\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Token received\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('token');\r",
							"    \r",
							"    // Save token to environment variable\r",
							"    pm.environment.set(\"auth_token\", jsonData.token);\r",
							"    console.log(\"Token saved:\", jsonData.token);\r",
							"});\r",
							"\r",
							"// Parse the response body\r",
							"let response = pm.response.json();\r",
							"// Basic test: status code should be 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							" pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							" pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"// Save JWT token to environment variable (adjust key as needed)\r",
							"if (response.token) {\r",
							"    pm.environment.set(\"jwt_token\", response.token);\r",
							"    console.log(\"JWT Token saved to environment\");\r",
							"} else {\r",
							" console.warn(\"No token found in response!\");\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "48312216-81ec6083-263f-4ea9-8537-074c6c591e52",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"ji@gmail.com\",\r\n  \"password\": \"ji\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/api/auth/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Flat",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a11e1804-ec71-4bba-805d-416ffe0efd14",
						"exec": [
							"// Basic Response Tests\r",
							"pm.test(\"Status code is 201 (Created)\", function () {\r",
							"    if (pm.response.code === 400) {\r",
							"        console.log(\"400 Error - likely JSON format issue\");\r",
							"    } else if (pm.response.code === 401) {\r",
							"        console.log(\"401 Error - Invalid or expired token\");\r",
							"        console.log(\"Response:\", pm.response.json());\r",
							"    }\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Response Structure Tests\r",
							"pm.test(\"Response contains created flat data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData).to.have.property('title');\r",
							"});\r",
							"\r",
							"pm.test(\"Created flat has an ID\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('_id');\r",
							"    pm.expect(jsonData._id).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Response data matches sent data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData.title).to.equal(\"Modern 2BR Apartment\");\r",
							"    pm.expect(jsonData.description).to.equal(\"Beautiful apartment in city center\");\r",
							"    \r",
							"    pm.expect(jsonData.userId).to.not.be.empty;\r",
							"\r",
							"});\r",
							"\r",
							"// Save created flat ID\r",
							"pm.test(\"Save flat ID\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData._id) {\r",
							"        pm.environment.set(\"created_flat_id\", jsonData._id);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "48312216-40a38ab2-44ab-4cf8-acbe-4ec82565dfe8",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4OTc0OTEzOWUxMmQ0NjgyMWNhOTAxNSIsImlhdCI6MTc1OTA2MjQ5MiwiZXhwIjoxNzYxNjU0NDkyfQ.KkHqzAAJwUgXX8OuIvdhOV46YpLzZ53hQDRyo29O-Kk",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Modern 2BR Apartment\",\r\n  \"description\": \"Beautiful apartment in city center\",\r\n  \"address\": \"123 Main St, City\",\r\n  \"bedrooms\": \"2\",\r\n  \"bathrooms\": \"1\",\r\n  \"carpark\": \"true\",\r\n  \"inspectionDate\": \"2025-10-15\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:5001/api/flats",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"flats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Flat",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a5596190-995e-443d-a33a-f0f80d3b17a4",
						"exec": [
							"// Basic Response Tests\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    if (pm.response.code === 401) {\r",
							"        console.log(\"401 Error - Invalid or expired token\");\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Data Structure Tests\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Each flat has required properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.length > 0) {\r",
							"        const flat = jsonData[0];\r",
							"        \r",
							"        // Log first flat structure for reference\r",
							"        console.log(\"First flat properties:\", Object.keys(flat));\r",
							"        \r",
							"        // Test common properties\r",
							"        pm.expect(flat).to.have.property('_id');\r",
							"        pm.expect(flat).to.have.property('userId');\r",
							"        pm.expect(flat).to.have.property('title');\r",
							"        pm.expect(flat).to.have.property('description');\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Each flat has required properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.length > 0) {\r",
							"        const flat = jsonData[0];\r",
							"        \r",
							"        console.log(\"Flat structure:\", Object.keys(flat));\r",
							"        \r",
							"        // Test properties\r",
							"        pm.expect(flat).to.have.property('title');\r",
							"        pm.expect(flat).to.have.property('tenantDetails');\r",
							"    }\r",
							"});\r",
							"pm.test(\"Response has correct CORS headers\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).to.equal(\"*\");\r",
							"});\r",
							"\r",
							"pm.test(\"All flats have valid IDs\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach((flat, index) => {\r",
							"        pm.expect(flat._id, `Flat ${index} should have _id`).to.be.a('string');\r",
							"        pm.expect(flat._id, `Flat ${index} _id should not be empty`).to.not.be.empty;\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"All flats belong to authenticated user\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach((flat, index) => {\r",
							"        pm.expect(flat.userId, `Flat ${index} should have userId`).to.not.be.empty;\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains reasonable data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // Log useful info\r",
							"    console.log(`Total flats returned: ${jsonData.length}`);\r",
							"    \r",
							"    if (jsonData.length > 0) {\r",
							"        console.log(\"Sample flat ID for maintenance testing:\", jsonData[0]._id);\r",
							"    }\r",
							"    \r",
							"    pm.expect(jsonData.length).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"// Save first flat ID for other tests\r",
							"pm.test(\"Save first flat ID for maintenance testing\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.length > 0) {\r",
							"        pm.environment.set(\"first_flat_id\", jsonData[0]._id);\r",
							"        console.log(\"Saved flat ID to environment:\", jsonData[0]._id);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "48312216-bb0d7ec2-bdf4-4eb4-9b0a-636a0cdc46ef",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "multipart/form-data",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					},
					{
						"key": "",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:5001/api/flats",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"flats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Flat",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "89ce287e-7768-44b0-8051-23f4212e520a",
						"exec": [
							"// Basic Response Tests\r",
							"pm.test(\"Status code is 200 (Updated)\", function () {\r",
							"    if (pm.response.code === 400) {\r",
							"        console.log(\"400 Error - Validation issue\");\r",
							"        console.log(\"Response:\", pm.response.json());\r",
							"    } else if (pm.response.code === 403) {\r",
							"        console.log(\"403 Error - Not authorized to update this flat\");\r",
							"    } else if (pm.response.code === 404) {\r",
							"        console.log(\"404 Error - Flat not found\");\r",
							"        console.log(\"Check if the flat ID in your URL is valid\");\r",
							"    } else if (pm.response.code === 401) {\r",
							"        console.log(\"401 Error - Invalid or expired token\");\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Response Structure Tests\r",
							"pm.test(\"Response contains updated flat data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData).to.have.property('_id');\r",
							"    pm.expect(jsonData).to.have.property('title');\r",
							"    pm.expect(jsonData).to.have.property('description');\r",
							"});\r",
							"\r",
							"pm.test(\"Updated flat has required properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // Test core properties\r",
							"    pm.expect(jsonData).to.have.property('_id');\r",
							"    pm.expect(jsonData).to.have.property('userId');\r",
							"    pm.expect(jsonData).to.have.property('title');\r",
							"    pm.expect(jsonData).to.have.property('description');\r",
							"    pm.expect(jsonData).to.have.property('updatedAt');\r",
							"    \r",
							"    pm.expect(jsonData._id).to.be.a('string');\r",
							"    pm.expect(jsonData._id).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Debug for checks\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    console.log(\"=== REQUEST DATA ===\");\r",
							"    console.log(\"Request URL:\", pm.request.url.toString());\r",
							"    console.log(\"Request body:\", pm.request.body);\r",
							"    \r",
							"    console.log(\"=== RESPONSE DATA ===\");\r",
							"    console.log(\"Response title:\", jsonData.title);\r",
							"    console.log(\"Response description:\", jsonData.description);\r",
							"    console.log(\"Response updatedAt:\", jsonData.updatedAt);\r",
							"    console.log(\"Response createdAt:\", jsonData.createdAt);\r",
							"    \r",
							"    console.log(\"=== TIMESTAMPS ===\");\r",
							"    const created = new Date(jsonData.createdAt);\r",
							"    const updated = new Date(jsonData.updatedAt);\r",
							"    console.log(\"Time difference (should be > 0 if updated):\", updated - created);\r",
							"});\r",
							"\r",
							"pm.test(\"Flat ownership is maintained\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // Verify the flat \r",
							"    pm.expect(jsonData.userId).to.not.be.empty;\r",
							"    pm.expect(jsonData.userId).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Update timestamp check\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const updatedAt = new Date(jsonData.updatedAt);\r",
							"    \r",
							"    console.log(\"UpdatedAt timestamp:\", jsonData.updatedAt);\r",
							"    console.log(\"Current time:\", new Date().toISOString());\r",
							"    \r",
							"    pm.expect(jsonData.updatedAt).to.not.be.empty;\r",
							"    pm.expect(updatedAt).to.be.a('date');\r",
							"});\r",
							"\r",
							"pm.test(\"Original creation data preserved\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property('createdAt');\r",
							"    pm.expect(jsonData.createdAt).to.not.be.empty;\r",
							"    \r",
							"    const createdAt = new Date(jsonData.createdAt);\r",
							"    const updatedAt = new Date(jsonData.updatedAt);\r",
							"    pm.expect(createdAt.getTime()).to.be.at.most(updatedAt.getTime());\r",
							"});\r",
							"\r",
							"// Save updated data\r",
							"pm.test(\"Save updated flat ID for future tests\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData._id) {\r",
							"        pm.environment.set(\"updated_flat_id\", jsonData._id);\r",
							"        console.log(\"Updated flat ID saved:\", jsonData._id);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "48312216-93af5523-6ad5-4159-8860-75c15f08e2ce",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "multipart/form-data",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text",
						"disabled": true
					},
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Updated Modern Apartment\",\r\n  \"description\": \"Recently renovated apartment with modern amenities\",\r\n  \"vacant\": false\r\n}"
				},
				"url": {
					"raw": "http://localhost:5001/api/flats/68d94346957d3e315e9289d7",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"flats",
						"68d94346957d3e315e9289d7"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Flat",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "02213c0f-11ce-4eb3-a3f5-c7fc56877ce5",
						"exec": [
							"// Basic Response Tests\r",
							"pm.test(\"Status code is 200 (Deleted)\", function () {\r",
							"    if (pm.response.code === 403) {\r",
							"        console.log(\"403 Error - Not authorized to delete this flat\");\r",
							"    } else if (pm.response.code === 404) {\r",
							"        console.log(\"404 Error - Flat not found\");\r",
							"    } else if (pm.response.code === 401) {\r",
							"        console.log(\"401 Error - Invalid or expired token\");\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// Response Content Tests\r",
							"pm.test(\"Response contains success message\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Deletion message is appropriate\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const message = jsonData.message.toLowerCase();\r",
							"\r",
							"    const hasDeletedKeyword = message.includes('deleted') || \r",
							"                             message.includes('removed') || \r",
							"                             message.includes('successfully');\r",
							"    \r",
							"    pm.expect(hasDeletedKeyword, \"Message should indicate successful deletion\").to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response may include deleted flat info\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    if (jsonData.flat || jsonData.deletedFlat) {\r",
							"        const flatInfo = jsonData.flat || jsonData.deletedFlat;\r",
							"        pm.expect(flatInfo).to.have.property('_id');\r",
							"        console.log(\"Deleted flat ID:\", flatInfo._id);\r",
							"    } else {\r",
							"        console.log(\"API returned only success message (no flat details)\");\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"No sensitive data exposed\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // make sure no sensitive data is returned\r",
							"    pm.expect(jsonData).to.not.have.property('password');\r",
							"    pm.expect(jsonData).to.not.have.property('token');\r",
							"});\r",
							"\r",
							"// Cleanup environment variables\r",
							"pm.test(\"Clean up environment variables\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // If succesfully deleted flat, clean variables\r",
							"    if (pm.response.code === 200) {\r",
							"        pm.environment.unset(\"created_flat_id\");\r",
							"        pm.environment.unset(\"test_flat_id\");\r",
							"        pm.environment.unset(\"maintenance_report_id\");\r",
							"        \r",
							"        console.log(\"Cleaned up environment variables for deleted flat\");\r",
							"    }\r",
							"});\r",
							"\r",
							"// Verification test\r",
							"pm.test(\"Log deletion confirmation\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    if (pm.response.code === 200) {\r",
							"        console.log(\"✓ Flat successfully deleted\");\r",
							"        console.log(\"Response message:\", jsonData.message);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "48312216-f4321a3f-fa0d-4fd5-99f6-98d81e29b607",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "multipart/form-data",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text",
						"disabled": true
					},
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:5001/api/flats/68ae8fea4e8dcde013004353",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"flats",
						"68ae8fea4e8dcde013004353"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Tenant Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a3d42142-7e88-4d23-a445-3b0d8602bdf1",
						"exec": [
							"// Basic Response Tests\r",
							"pm.test(\"Status code is 201 (Created)\", function () {\r",
							"    if (pm.response.code === 400) {\r",
							"        console.log(\"400 Error - Validation issue\");\r",
							"        console.log(\"Response:\", pm.response.json());\r",
							"        console.log(\"Check if all required fields are included in request body\");\r",
							"    } else if (pm.response.code === 409) {\r",
							"        console.log(\"409 Error - User already exists\");\r",
							"    }\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// Response Structure Tests\r",
							"pm.test(\"Response contains created tenant data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Created tenant has required properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // Test properties response\r",
							"    pm.expect(jsonData).to.have.property('_id');\r",
							"    pm.expect(jsonData).to.have.property('userId');\r",
							"    pm.expect(jsonData).to.have.property('title');\r",
							"    pm.expect(jsonData).to.have.property('description');\r",
							"    pm.expect(jsonData).to.have.property('vacant');\r",
							"    pm.expect(jsonData).to.have.property('inspectionDate');\r",
							"    pm.expect(jsonData).to.have.property('createdAt');\r",
							"});\r",
							"\r",
							"pm.test(\"Response data matches sent data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // Test data \r",
							"    pm.expect(jsonData.title).to.equal(\"Modern 2BR Apartment\");\r",
							"    pm.expect(jsonData.description).to.equal(\"Beautiful apartment in city center\");\r",
							"    pm.expect(jsonData.vacant).to.equal(true);\r",
							"    \r",
							"    // Check user id\r",
							"    pm.expect(jsonData.userId).to.not.be.empty;\r",
							"    pm.expect(jsonData.createdAt).to.not.be.empty;\r",
							"    pm.expect(jsonData.updatedAt).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Password is not exposed in response\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.not.have.property('password');\r",
							"});\r",
							"\r",
							"pm.test(\"Response includes JWT token or user ID\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData._id).to.not.be.empty;\r",
							"});\r",
							"\r",
							"// Save tenant data \r",
							"pm.test(\"Save tenant ID\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData._id) {\r",
							"        pm.environment.set(\"created_tenant_id\", jsonData._id);\r",
							"    }\r",
							"    if (jsonData.token) {\r",
							"        pm.environment.set(\"auth_token\", jsonData.token);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "48312216-921f16b9-e2dc-405a-a93a-fa0dcf7ea086",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "multipart/form-data",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					},
					{
						"key": "",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Modern 2BR Apartment\",\r\n  \"description\": \"Beautiful apartment in city center\",\r\n  \"address\": \"123 Main St, Brisbane, QLD\",\r\n  \"bedrooms\": \"2\",\r\n  \"bathrooms\": \"1\", \r\n  \"carpark\": \"true\",\r\n  \"inspectionDate\": \"2025-10-15\",\r\n  \"vacant\": false,\r\n  \"tenantDetails\": {\r\n    \"firstName\": \"John\",\r\n    \"lastName\": \"Doe\",\r\n    \"email\": \"john.doe@example.com\",\r\n    \"phone\": \"123-456-7890\",\r\n    \"address\": \"123 Main Street, Brisbane, QLD\"\r\n  }\r\n}"
				},
				"url": {
					"raw": "http://localhost:5001/api/flats",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"flats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Tenant Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3a2336e7-ce56-49af-a5ee-48c53952922a",
						"exec": [
							"// Basic Response Tests\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    if (pm.response.code === 401) {\r",
							"        console.log(\"401 Error - Invalid or expired token\");\r",
							"    } else if (pm.response.code === 404) {\r",
							"        console.log(\"404 Error - Tenant not found\");\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// Data Structure Tests\r",
							"pm.test(\"Response contains flats data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Each flat has required properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.length > 0) {\r",
							"        const flat = jsonData[0];\r",
							"        pm.expect(flat).to.have.property('_id');\r",
							"        pm.expect(flat).to.have.property('title');\r",
							"        pm.expect(flat).to.have.property('description');\r",
							"        pm.expect(flat).to.have.property('userId');\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Flat data is valid\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.length > 0) {\r",
							"        const flat = jsonData[0];\r",
							"        \r",
							"        // Check data types\r",
							"        pm.expect(flat._id).to.be.a('string');\r",
							"        pm.expect(flat.title).to.be.a('string');\r",
							"        pm.expect(flat.description).to.be.a('string');\r",
							"        pm.expect(flat.userId).to.be.a('string');\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Password field is not exposed\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.length > 0) {\r",
							"        const flat = jsonData[0];\r",
							"        pm.expect(flat).to.not.have.property('password');\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "48312216-ac5aaf12-25a8-4871-b8e1-71f09a30802f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"firstName\": \"John\",\r\n  \"lastName\": \"Doe\", \r\n  \"email\": \"john@example.com\",\r\n  \"password\": \"password123\",\r\n  \"phone\": \"123-456-7890\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/api/flats",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"flats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Tenant Details",
			"id": "48312216-cca05600-a6ce-471d-92c8-7c5c44b987e7",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "multipart/form-data",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					},
					{
						"key": "",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:5001/api/flats",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"flats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Maintenance Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "faaa0891-30c5-4914-8de2-4dd8a488dcd2",
						"exec": [
							"// Basic Response Tests\r",
							"pm.test(\"Status code is 201 (Created)\", function () {\r",
							"    if (pm.response.code === 400) {\r",
							"        console.log(\"400 Error - Validation issue\");\r",
							"        console.log(\"Response:\", pm.response.json());\r",
							"    } else if (pm.response.code === 403) {\r",
							"        console.log(\"403 Error - Not authorized to access this flat\");\r",
							"    } else if (pm.response.code === 404) {\r",
							"        console.log(\"404 Error - Flat not found\");\r",
							"    }\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// Response Structure Tests\r",
							"pm.test(\"Response contains maintenance report data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData).to.have.property('maintenanceReport');\r",
							"    pm.expect(jsonData).to.have.property('contractor');\r",
							"    pm.expect(jsonData).to.have.property('flat');\r",
							"});\r",
							"\r",
							"pm.test(\"Maintenance report has required properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const report = jsonData.maintenanceReport;\r",
							"    \r",
							"    pm.expect(report).to.have.property('id');\r",
							"    pm.expect(report).to.have.property('issueType');\r",
							"    pm.expect(report).to.have.property('description');\r",
							"    pm.expect(report).to.have.property('priority');\r",
							"    pm.expect(report).to.have.property('contractorId');\r",
							"    pm.expect(report).to.have.property('status');\r",
							"    pm.expect(report).to.have.property('reportedDate');\r",
							"});\r",
							"\r",
							"pm.test(\"Response data matches sent data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const report = jsonData.maintenanceReport;\r",
							"    \r",
							"    // Test the data that was sent\r",
							"    pm.expect(report.issueType).to.equal(\"plumbing\");\r",
							"    pm.expect(report.description).to.equal(\"Kitchen sink is leaking and needs immediate attention\");\r",
							"    pm.expect(report.priority).to.equal(\"high\");\r",
							"    pm.expect(report.contractorId).to.equal(\"1\");\r",
							"    pm.expect(report.status).to.equal(\"reported\");\r",
							"});\r",
							"\r",
							"pm.test(\"Contractor information is included\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const contractor = jsonData.contractor;\r",
							"    \r",
							"    pm.expect(contractor).to.have.property('id');\r",
							"    pm.expect(contractor).to.have.property('name');\r",
							"    pm.expect(contractor).to.have.property('specialization');\r",
							"    pm.expect(contractor).to.have.property('phone');\r",
							"    pm.expect(contractor).to.have.property('email');\r",
							"});\r",
							"\r",
							"pm.test(\"Maintenance report added to flat\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const flat = jsonData.flat;\r",
							"    \r",
							"    pm.expect(flat).to.have.property('maintenanceReports');\r",
							"    pm.expect(flat.maintenanceReports).to.be.an('array');\r",
							"    pm.expect(flat.maintenanceReports.length).to.be.at.least(1);\r",
							"});\r",
							"\r",
							"// Save data for future tests\r",
							"pm.test(\"Save maintenance report ID for future tests\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.maintenanceReport && jsonData.maintenanceReport.id) {\r",
							"        pm.environment.set(\"maintenance_report_id\", jsonData.maintenanceReport.id);\r",
							"    }\r",
							"    if (jsonData.flat && jsonData.flat._id) {\r",
							"        pm.environment.set(\"test_flat_id\", jsonData.flat._id);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"id": "48312216-1aee3e23-599b-41da-b9ce-38334cd0a2d3",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "multipart/form-data",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					},
					{
						"key": "",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"issueType\": \"plumbing\",\r\n  \"description\": \"Kitchen sink is leaking and needs immediate attention\",\r\n  \"priority\": \"high\",\r\n  \"contractorId\": \"1\",\r\n  \"estimatedCost\": \"250\",\r\n  \"scheduledDate\": \"2025-10-01\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:5001/api/flats",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"flats"
					]
				}
			},
			"response": []
		}
	]
}